(require 'bind-key)


(global-set-key (kbd "C-<tab>") 'company-dabbrev)
(global-set-key (kbd "M-<tab>") 'company-complete)
(global-set-key (kbd "C-c C-y") 'company-yasnippet)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))


(global-set-key (kbd "C-M-a") 'sp-beginning-of-sexp)
(global-set-key (kbd "C-M-e") 'sp-end-of-sexp)
(global-set-key (kbd "C-M-k") 'sp-kill-sexp)
(global-set-key (kbd "C-M-k") 'sp-kill-sexp)
(global-set-key (kbd "C-M-n") 'sp-forward-sexp)
(global-set-key (kbd "C-M-p") 'sp-backward-sexp)
(global-set-key (kbd "C-M-b") 'sp-up-sexp)
(global-set-key (kbd "C-M-f") 'sp-down-sexp)

(global-set-key (kbd "C-x v R") 'diff-hl-revert-hunk)

(global-set-key (kbd "C-M-{") (lambda () (interactive) (shrink-window 10 1)))
(global-set-key (kbd "C-M-}") (lambda () (interactive) (enlarge-window 10 1)))
(global-set-key (kbd "C-M-?") (lambda () (interactive) (shrink-window 5 nil)))
(global-set-key (kbd "C-M-\"") (lambda () (interactive) (enlarge-window 5 nil)))
(global-set-key (kbd "C-M-]") (lambda () (interactive) (other-window 1)))
(global-set-key (kbd "C-M-[") (lambda () (interactive) (other-window -1)))

(global-set-key (kbd "<C-down-mouse-1>") nil)
(global-set-key (kbd "<C-down-mouse-2>") nil)
(global-set-key (kbd "<C-down-mouse-3>") nil)
(global-set-key (kbd "<mouse-3>") nil)
(global-set-key (kbd "<mouse-6>") (lambda () (interactive) nil))
(global-set-key (kbd "<double-mouse-6>") (lambda () (interactive) nil))
(global-set-key (kbd "<triple-mouse-6>") (lambda () (interactive) nil))
(global-set-key (kbd "<mouse-7>") (lambda () (interactive) nil))
(global-set-key (kbd "<double-mouse-7>") (lambda () (interactive) nil))
(global-set-key (kbd "<triple-mouse-7>") (lambda () (interactive) nil))
(global-set-key (kbd "<triple-wheel-left>") (lambda () (interactive) nil))
(global-set-key (kbd "<double-wheel-left>") (lambda () (interactive) nil))
(global-set-key (kbd "<wheel-left>") (lambda () (interactive) nil))
(global-set-key (kbd "<triple-wheel-right>") (lambda () (interactive) nil))
(global-set-key (kbd "<double-wheel-right>") (lambda () (interactive) nil))
(global-set-key (kbd "<wheel-right>") (lambda () (interactive) nil))

(req-package key-chord
  :force t
  :ensure t
  :chords (("qw" . kill-this-buffer)
           ("qq" . kill-this-buffer)
           (";2" . split-window-below)
           (";3" . split-window-right)
           (";4" . kill-buffer-and-window)
           (";0" . delete-window)
           (";n" . scroll-up-command)
           (";h" . scroll-down-command)
           (";/" . undo)
           (";u" . "\C-u")
           (";j" . "\C-n")
           (";k" . "\C-p")
           (";g" . "\C-g")
           ("1e" . "\C-a")
           ("2e" . "\C-a\t")
           ("3e" . "\C-e")
           ("4e" . "\C-e ")
           (";1" . zygospore-toggle-delete-other-windows)
           ("xf" . projectile-find-file)
           ("xd" . projectile-find-dir)
           ("ps" . projectile-switch-project-action)
           (";l" . helm-bookmarks)
           ("m;" . magit-status)
           (";m" . magit-status)
           ("xb" . ido-switch-buffer)
           (";1" . zygospore-toggle-delete-other-windows)
           (";p" . paradox-list-packages)
           (";o" . ace-window))
  :config (key-chord-mode 1))

(provide 'init-bindings)
